/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inventoryassessment;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/**
 *
 * @author Eric
 */
public class Product {
    private List<Part> wrappedParts;
    private ObservableList<Part> associatedParts;
    private int id;
    private String name;
    private double price;
    private int stock;
    private int min;
    private int max;
    private static int idCounter = 1000; //product id starts at 1001
    public Product(String name, double price, int stock, int min, int max){
        this.wrappedParts = new ArrayList<>();
        this.associatedParts = FXCollections.observableList(wrappedParts);
        this.id = ++idCounter;//id is autogenerated and so the constructor does not need an ID in the method signature
        this.name = name;
        DecimalFormat format1 = new DecimalFormat("#.##");
        this.price = Double.parseDouble(format1.format(price));
        this.stock = stock;
        this.min = min;
        this.max = max;
    }
    void setId(int id){
        this.id = id;
    }
    void setName(String name){
        this.name = name;
    }
    void setPrice(double price){
        this.price = price;
    }
    void setPrice(int price){
        this.price = (double)price;
    }
    void setStock(int stock){
        this.stock = stock;
    }
    void setMin(int min){
        this.min = min;
    }
    void setMax(int max){
        this.max = max;
    }
    int getId(){
        return this.id;
    }
    String getName(){
        return this.name;
    }
    double getPrice(){
        return this.price;
    }
    int getStock(){
        return this.stock;
    }
    int getMin(){
        return this.min;
    }
    int getMax(){
        return this.max;
    }
    void addAssociatedPart(Part part){
        associatedParts.add(part);
    }
    void deleteAssociatedPart(Part associatedPart){
        this.associatedParts.remove(associatedPart);
    }
    ObservableList<Part> getAllAssociatedParts(){
        return this.associatedParts;
    }
}